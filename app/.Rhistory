names(df) <- c('val', 'freq')
for (i in 1:nrow(df)) {
if(df[i,]$freq) == 1) {
print('gegeg')
}
}
print(score)
}
repeats(c(4,5,7,5,4,8))
repeats <- function(arr){
score <- 0
df <- as.data.frame(table(arr))
names(df) <- c('val', 'freq')
for (i in 1:nrow(df)) {
if(df[i,]$freq == 1) {
print('gegeg')
}
}
print(score)
}
repeats(c(4,5,7,5,4,8))
repeats <- function(arr){
score <- 0
df <- as.data.frame(table(arr))
names(df) <- c('val', 'freq')
for (i in 1:nrow(df)) {
if(df[i,]$freq == 1) {
print(df[i,1])
print('gegeg')
}
}
print(score)
}
repeats(c(4,5,7,5,4,8))
repeats <- function(arr){
score <- 0
df <- as.data.frame(table(arr))
names(df) <- c('val', 'freq')
for (i in 1:nrow(df)) {
if(df[i,]$freq == 1) {
print(df[i,1][1])
print('gegeg')
}
}
print(score)
}
repeats(c(4,5,7,5,4,8))
repeats <- function(arr){
score <- 0
df <- as.data.frame(table(arr))
names(df) <- c('val', 'freq')
for (i in 1:nrow(df)) {
if(df[i,]$freq == 1) {
print(df[i,1][[1]])
print('gegeg')
}
}
print(score)
}
repeats(c(4,5,7,5,4,8))
repeats <- function(arr){
score <- 0
df <- as.data.frame(table(arr))
names(df) <- c('val', 'freq')
for (i in 1:nrow(df)) {
if(df[i,]$freq == 1) {
print(df[i,1])
print('gegeg')
}
}
print(score)
}
repeats(c(4,5,7,5,4,8))
repeats <- function(arr){
score <- 0
df <- as.data.frame(table(arr))
names(df) <- c('val', 'freq')
for (i in 1:nrow(df)) {
if(df[i,]$freq == 1) {
print(df[i,1]$[1])
print('gegeg')
}
}
print(score)
}
repeats(c(4,5,7,5,4,8))
repeats <- function(arr){
score <- 0
df <- as.data.frame(table(arr))
names(df) <- c('val', 'freq')
for (i in 1:nrow(df)) {
if(df[i,]$freq == 1) {
print(df[i,]$val)
print('gegeg')
}
}
print(score)
}
repeats(c(4,5,7,5,4,8))
repeats <- function(arr){
score <- 0
df <- as.data.frame(table(arr))
names(df) <- c('val', 'freq')
for (i in 1:nrow(df)) {
if(df[i,]$freq == 1) {
print(df[i,]$val[1])
print('gegeg')
}
}
print(score)
}
repeats(c(4,5,7,5,4,8))
repeats <- function(arr){
score <- 0
df <- as.data.frame(table(arr))
names(df) <- c('val', 'freq')
for (i in 1:nrow(df)) {
if(df[i,]$freq == 1) {
print(df[i,]$val[[1]])
print('gegeg')
}
}
print(score)
}
repeats(c(4,5,7,5,4,8))
repeats <- function(arr){
score <- 0
df <- as.data.frame(table(arr))
names(df) <- c('val', 'freq')
for (i in 1:nrow(df)) {
if(df[i,]$freq == 1) {
score <- score + df[i,]$val
print('gegeg')
}
}
print(score)
}
repeats(c(4,5,7,5,4,8))
repeats <- function(arr){
score <- 0
df <- as.data.frame(table(arr))
names(df) <- c('val', 'freq')
for (i in 1:nrow(df)) {
if(df[i,]$freq == 1) {
score <- score + unfactor(df[i,]$val)
print('gegeg')
}
}
print(score)
}
repeats(c(4,5,7,5,4,8))
repeats <- function(arr){
used <- c()
print(used)
print(score)
}
repeats(c(4,5,7,5,4,8))
repeats <- function(arr){
score <- 0
used <- c()
print(used)
print(score)
}
repeats(c(4,5,7,5,4,8))
repeats <- function(arr){
score <- 0
used <- c()
for (n in arr) {
if (!any(n == used)) {
append(used, n)
score <- score + n
}
}
print(score)
}
repeats(c(4,5,7,5,4,8))
repeats <- function(arr){
score <- 0
used <- c()
for (n in arr) {
if (!any(n == used)) {
used <- append(used, n)
score <- score + n
}
}
print(score)
}
repeats(c(4,5,7,5,4,8))
repeats <- function(arr){
score <- 0
used <- c()
for (n in arr) {
if (!any(n == used)) {
print(n)
used <- append(used, n)
score <- score + n
}
}
print(score)
}
repeats(c(4,5,7,5,4,8))
repeats <- function(arr){
score <- 0
used <- c()
for (n in arr) {
if (!any(n == used)) {
used <- append(used, n)
score <- score + n
} else {
score <- score - n
}
}
print(score)
}
repeats(c(4,5,7,5,4,8))
rawdata.heartFailureData <- read.csv('data/heartfailure.csv')
shiny::runApp('Documents/lifenum/app')
setwd("~/Documents/lifenum")
setwd("~/Documents/lifenum/app")
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
source("~/Documents/lifenum/app/views/datainfo/datainfo.view.R")
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
source("~/Documents/lifenum/app/views/datainfo/datainfo.view.R")
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
source("~/Documents/lifenum/app/views/datainfo/datainfo.view.R")
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(
echo = FALSE,
comment = NA,
cache = FALSE,
message = FALSE,
warning = FALSE
)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(dplyr)
library(shiny)
library(knitr)
library(DT)
library(ggplot2)
library(htmltools)
library(htmlwidgets)
# original -- devtools::install_github("timelyportfolio/functionplotR@139a2bcaea6a2f10c181473efb2bd29b7418b4bb")
# fixed for shinyapps.io -- devtools::install_github("vnijs/functionplotR")
library(functionplotR)
encoding <- getOption("shiny.site.encoding", default = "UTF-8")
## options for knitting/rendering rmarkdown chunks
knitr::opts_chunk$set(
echo = FALSE,
comment = NA,
cache = FALSE,
message = FALSE,
warning = FALSE
)
## function to render .md files to html
inclMD <- function(path) {
markdown::markdownToHTML(
path,
fragment.only = TRUE,
options = "",
stylesheet = "",
encoding = encoding
)
}
## function to render .Rmd files to html - does not embed image or add css
inclRmd <- function(path, r_env = parent.frame()) {
paste(
readLines(path, warn = FALSE, encoding = encoding),
collapse = '\n'
) %>%
knitr::knit2html(
text = .,
fragment.only = TRUE,
envir = r_env,
options = "",
stylesheet = "",
encoding = encoding
) %>%
gsub("&lt;!--/html_preserve--&gt;","",.) %>%  ## knitr adds this
gsub("&lt;!--html_preserve--&gt;","",.) %>%   ## knitr adds this
HTML
}
## make html table
make_table <- function(dat, width = "50%") {
knitr::kable(
dat,
align = "c",
format = "html",
table.attr
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(dplyr)
library(shiny)
library(knitr)
library(DT)
library(ggplot2)
library(htmltools)
library(htmlwidgets)
# original -- devtools::install_github("timelyportfolio/functionplotR@139a2bcaea6a2f10c181473efb2bd29b7418b4bb")
# fixed for shinyapps.io -- devtools::install_github("vnijs/functionplotR")
library(functionplotR)
encoding <- getOption("shiny.site.encoding", default = "UTF-8")
## options for knitting/rendering rmarkdown chunks
knitr::opts_chunk$set(
echo = FALSE,
comment = NA,
cache = FALSE,
message = FALSE,
warning = FALSE
)
## function to render .md files to html
inclMD <- function(path) {
markdown::markdownToHTML(
path,
fragment.only = TRUE,
options = "",
stylesheet = "",
encoding = encoding
)
}
## function to render .Rmd files to html - does not embed image or add css
inclRmd <- function(path, r_env = parent.frame()) {
paste(
readLines(path, warn = FALSE, encoding = encoding),
collapse = '\n'
) %>%
knitr::knit2html(
text = .,
fragment.only = TRUE,
envir = r_env,
options = "",
stylesheet = "",
encoding = encoding
) %>%
gsub("&lt;!--/html_preserve--&gt;","",.) %>%  ## knitr adds this
gsub("&lt;!--html_preserve--&gt;","",.) %>%   ## knitr adds this
HTML
}
## make html table
make_table <- function(dat, width = "50%") {
knitr::kable(
dat,
align = "c",
format = "html",
table.attr
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(dplyr)
library(shiny)
library(knitr)
library(DT)
library(ggplot2)
library(htmltools)
library(htmlwidgets)
# original -- devtools::install_github("timelyportfolio/functionplotR@139a2bcaea6a2f10c181473efb2bd29b7418b4bb")
# fixed for shinyapps.io -- devtools::install_github("vnijs/functionplotR")
library(functionplotR)
encoding <- getOption("shiny.site.encoding", default = "UTF-8")
## options for knitting/rendering rmarkdown chunks
knitr::opts_chunk$set(
echo = FALSE,
comment = NA,
cache = FALSE,
message = FALSE,
warning = FALSE
)
## function to render .md files to html
inclMD <- function(path) {
markdown::markdownToHTML(
path,
fragment.only = TRUE,
options = "",
stylesheet = "",
encoding = encoding
)
}
## function to render .Rmd files to html - does not embed image or add css
inclRmd <- function(path, r_env = parent.frame()) {
paste(
readLines(path, warn = FALSE, encoding = encoding),
collapse = '\n'
) %>%
knitr::knit2html(
text = .,
fragment.only = TRUE,
envir = r_env,
options = "",
stylesheet = "",
encoding = encoding
) %>%
gsub("&lt;!--/html_preserve--&gt;","",.) %>%  ## knitr adds this
gsub("&lt;!--html_preserve--&gt;","",.) %>%   ## knitr adds this
HTML
}
## make html table
make_table <- function(dat, width = "50%") {
knitr::kable(
dat,
align = "c",
format = "html",
table.attr
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
shinyApp(ui = ui, server = server)
library(shiny)
source('views/ui.R', local = TRUE)
source('scripts/server.R', local = TRUE)
source('libs/Rmd.R', local = TRUE)
shinyApp(ui = ui, server = server)
